#include<iostream>
#include<iomanip>
#include<string>
using namespace std;

struct Sinhvien
{
	string MSSV;
	float dtb;
};

struct node {
	Sinhvien info;
	node* next;
};

struct list {
	node* head;
	node* tail;
};

node* getnode(Sinhvien sv);
void inserthead(Sinhvien sv, list& l);
void output(list l);
bool sosanh(string a, string b);
int find(list l, string a);
void DSSV8d(list l);
void xoasvcodiemnhohon2(list l);
void sapxepgiamdan(list l);
void chenphantu(list l, node* p);

void main() {
	list l;
	Sinhvien sv;
	int luachon;
	l.head = l.tail = NULL;
	do {
		cout << "1. Nhap dssv: " << endl;
		cout << "2. Xuat dssv: " << endl;
		cout << "3. in ra dssv co dien >=8" << endl;
		cout << "4. Tim sv thao mssv" << endl;
		cout << "5. Huy sinh vien co diem <2" << endl;
		cout << "6. Sap sep danh sach theo thu diem diem tang dan" << endl;
		cout << "Nhap lua chon: ";
		cin >> luachon;

		switch (luachon) {
		case 1: {
			cout << "Nhap mssv(0 de dung lai): ";
			cin >> sv.MSSV;
			while (sv.MSSV.length() != 1) {
				cout << "Nhap dtb: ";
				cin >> sv.dtb;
				inserthead(sv, l);
				cout << "Nhap mssv(0 de dung lai): ";
				cin >> sv.MSSV;
			}
			break;
		}
		case 2: {
			cout << "dssv: " << endl;
			output(l);
			cout << "da xuat";
			break;
		}
		case 3: {
			cout << "\nDanh sach sv co diem tb >=8" << endl;
			DSSV8d(l);
			break;
		}
		case 4: {
			string a;
			cout << "Nhap MSSV can tim: ";
			cin >> a;
			find(l, a);
			break;
		}
		case 5: {
			cout << "Huy sinh vien co diem < 2" << endl;
			xoasvcodiemnhohon2(l);
			output(l);
			break;
		}
		case 6: {
			cout << "sau khi sap xep cac sinh vien theo diem giam dan" << endl;
			sapxepgiamdan(l);
			output(l);
			break;
		}
		case 7: {
			Sinhvien sv;
			cout << "Nhap MSSV can them: ";
			cin >> sv.MSSV;
			cout << "Nhap diem tb: ";
			cin >> sv.dtb;
			node* q = getnode(sv);
			chenphantu(l, q);
			cout << "DSSV sau khi them la: " << endl;
			output(l);
			break;
		}

		}
	} while (luachon != 0);

}

node* getnode(Sinhvien sv) {
	node* p;
	p = new node;
	p->info.MSSV= sv.MSSV;
	p->info.dtb = sv.dtb;
	p->next = NULL;
	return p;
}

void inserthead(Sinhvien sv, list &l) {
	node* p;
	p = getnode(sv);
	if (l.head == NULL) {
		l.head = l.tail = p;
	}
	else {
		p->next = l.head;
		l.head = p;
	}
}

void output(list l) {
	node* p = l.head;
	while (p != NULL) {
		cout << left <<setw(15) << p->info.MSSV << p->info.dtb << endl;
		p = p->next;
	}
}

bool sosanh(string a, string b) {
	if (a.length() == b.length()) {
		for (int i = 0; i < a.length(); i++) {
			if (a[i] != b[i]) {
				return false;
			}
		}
		return true;
	}
	return false;
}

int find(list l, string a) {
	node* p = l.head;
	while (p != NULL) {
		if (sosanh(a, p->info.MSSV)) {
			cout << left << setw(15) << p->info.MSSV << p->info.dtb << endl;
			return 0;
		}
		p = p->next;
	}
	cout << "khong co sinh vien!";
}

void DSSV8d(list l) {
	node* p = l.head;
	while (p != NULL) {
		if (p->info.dtb >= 8) {
			cout << left << setw(15) << p->info.MSSV << p->info.dtb << endl;
		}
		p = p->next;
	}
}

void xoasvcodiemnhohon2(list l) {
	node* p,* q;
	p = l.head;
	q = p->next;
	while (q!=NULL)
	{	
		while(q->info.dtb < 2) {
			p->next = q->next;
			delete q;
			q = p->next;
		}
		p = p->next;
		q = p->next;
	}
}

void chenphantu(list l,node *p) {
	node* q, * r;
	q = l.head;
	while (q->next != NULL) {
		r = q->next;
		if (r->info.dtb < p->info.dtb) {
			p->next = q->next;
			q->next = p;
		}
		q = r;
	}
}

void sapxepgiamdan(list l) {
	node* p, * r, * q;
	p = l.head;
	while (p->next != NULL) {
		q = p->next;
		r = p;
		while (q != NULL) {
			if (r->info.dtb < q->info.dtb) {
				r = q;
			}
			q = q->next;
		}
		swap(r->info.dtb, p->info.dtb);
		swap(r->info.MSSV, p->info.MSSV);
		p = p->next;
	}
}
